



/*
Интерфейс представляет ссылочный тип, который может определять 
    некоторый функционал - набор методов и свойств без реализации. 
Затем этот функционал реализуют классы и структуры, которые применяют данные интерфейсы.
Конструкция для определения интерфейса:
    interface "название интерфейса"{"реализация интерфейса"}

Обычно название интерфейса начинается с буквы I (это не обязятельно)
К интерфейсам нельзя применять модификаторы sealed и abstract
*/


interface IMy_class{
    // В интерфейсе можно определять:
    // Константы
    public const int number = 5; 
    // Статические переменные (любая переменная должна быть статической)
    public static int snumber = 10;
    // Методы без реализации (по умолчанию все такие методы имеют модификатор abstract)
    //    (ограничения по модификаторам virtual, static обходятся с помощью модификатора abstract)
    public void print_number(); 

    // Методы c реализацией по умолчанию (данный метод можно не реализовывать)
    public void print(){Console.WriteLine($"IMy_class.print. snumber = {IMy_class.snumber}");}

    // Свойства
    public string Name{get; set;}

    // Определение делегата для события
    public delegate void Print_name(string message); 

    // Событие
    public event Print_name MoveEvent;
}





class Program{
    public static void Main(){
        /* Создаем переменную IMy_class
        В данную переменную можно засунуть экземпляр класса/структуры 
            который реализует этот интерфейс 
        Для переменной будут использоватся те методы которые определены 
            в интерфейсе (при условии что методы не виртуальне/абстрактные)
        */
        IMy_class obj;
        // Ошибка. Обьекты интерфейсов нельзя создавать  
        // IMy_class obj = new IMy_class(); 
        
    }
}