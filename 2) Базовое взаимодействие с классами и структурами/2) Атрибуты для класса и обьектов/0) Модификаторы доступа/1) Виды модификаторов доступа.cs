



// Самописный класс
class My_class{
/* Поле приватных атрибутов (данное поле является по умолчанию)
Создание инкапсулированных атрибутов
Данные атрибуты могут использоватся только в классе
Для создания нужно использовать модификатор private
*/
private int super_number = 25; 

/* Поле защищено-приватных атрибутов 
Данные атрибуты могут использоватся в классе или в произоводном классе 
  (главное чтобы этот класс был в текущей сборке)
Для создания нужно использовать модификатор private protected
*/
private protected int sup_number = 23;

/* Поле защищеных атрибутов
Создание защищеных атрибутов
Данные атрибуты могут использоватся только в классе или в 
    классах производным от данного.
Для создания нужно использовать модификатор protected
*/
protected int s_number = 20; 

/* Поле искапсулированное для других сборок
Данные атрибуты могут использоватся где угодно, главное чтобы обращение к этим
    атрибутам было в одинаковом проекте.
    В других проектах данный атрибут никто не сможет использовать
Для создания нужно использовать модификатор internal
*/
internal int inter_number = 18;

/* Поле защищеное для других сборок
Данные атрибуты могут использоватся где угодно, главное чтобы обращение к этим
    атрибутам было в одинаковом проекте. 
    В других проектах данный атрибут сможет использовать только производный класс
Для создания нужно использовать модификатор internal protected
*/
internal protected int inte_prot_number = 16;

/* Поле публичных атрибутов
Создание публичных атрибутов
Данные атрибуты доступны в любой части программы
*/
public int number = 15;
}

/*
Структуры не могут иметь такое поле как protected
Так же если в структуре есть поля, то в структуре 
    необходимо определить конструктор
Все остальное работает так же как и на классах
*/

// Подробнее про модификаторы доступа в Модификаторы доступа.png





class Program{
    public static void Main(){
        // Создание экземпляра класса My_class
        My_class new_class = new My_class(); 
        // За классом мы можем использовать только public атрибуты
        
        // Изменение атрибутов класса
        new_class.number = 100;
        Console.WriteLine($"Обращение к атрибуту number класса My_class: {new_class.number}");
    }
}