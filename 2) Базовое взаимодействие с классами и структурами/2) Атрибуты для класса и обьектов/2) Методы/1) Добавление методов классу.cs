



// Самописный класс
class My_class{
/* Поле приватных атрибутов (данное поле является по умолчанию)
Создание инкапсулированных атрибутов
Данные атрибуты могут использоватся только в классе
Для создания нужно использовать модификатор private
*/
private int super_number = 25;

// Коментарий к привадному методу
private void pri_fun(){
        Console.WriteLine("Вызов функции pub_fun");
    }


/* Поле защищеных атрибутов
Создание защищеных атрибутов
Данные атрибуты могут использоватся только в классе или в 
    классах производным от данного.
Для создания нужно использовать модификатор protected
*/
protected int s_number = 20; 

// Коментарий к защищеному методу
protected void pro_fun(){
        Console.WriteLine("Вызов функции pro_fun");
    }


/* Поле публичных атрибутов
Создание публичных атрибутов
Данные атрибуты доступны в любой части программы
*/
public int number = 15;

// Коментарий к публичному методу
public void fun(){
        /*В методе мы можем обращатся к любым атрибутам/методам
        
        this - данная штука ссылается на действующий объект класса
        this.super_number- данная штука запрашивает атрибут у действующего объекта класса
        this необязателен при задании значения атрибутам класса
        Также с помощью this можно вернуть текущий объект класса
            return this
        */
        this.super_number = 25;
        this.s_number = 20;
        this.number = 10;
        Console.WriteLine($"super_number: {super_number}, s_number: {s_number}, number: {number}");
        // Вызов методов класса
        this.pro_fun();
        this.pri_fun();
    }
}
/*
Структуры не могут иметь такое поле как protected
Так же если в структуре есть поля, то в структуре 
    необходимо определить конструктор
Все остальное работает так же как и на классах
*/




class Program{
    public static void Main(){
        // Создание экземпляра класса My_class
        My_class new_class = new My_class(); 
        // За классом мы можем использовать только public атрибуты
        
        // Обращение к публичным методам класса
        new_class.fun();
    }
}