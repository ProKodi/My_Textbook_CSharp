



/*Значение null описывает пустой набор значений. 
Переменная типа null не может быть указана.
null используется для того чтобы указать 
    переменной что значения для нее нет (компилятор автоматически даст переменной значение по умолчанию)

Значение по умолчанию зависит от типа переменной

Чтобы определить переменную которая будет ссылатся на null, необходимо после 
    типа данных переменной поставить ? 

После добавления ? к типу данных переменной, 
    тип данных переменной определять так же с вопросом
Пример:
    int? number = null;
    void print(int? num){...}
    print(number); 
Если бы в функции print не поставили ? перед int то это бы привело к ошибке
    (так как int не ссылочный тип данных)

Можно не ставить ?, но при этом понадобится обернуть переменную в блок 
    #nullable disable, #nullable disable (работает только для ссылочных типов)

*/

// Работа с ссылочными данными

string? inform = null; // Переменная ссылающая на значение по умолчанию

/*
Аналог
#nullable disable // начинам поле где не работает nullable-контекст
    string inform = null;
#nullable disable // заканчиваем поле где не работает nullable-контекст
*/
Console.WriteLine($"inform = {inform}"); // В консоль выведит: inform = 


// Проверка перемненной на отсутствие значения
Console.WriteLine($"inform == null: {inform == null}"); // В консоль выведит: inform == null: True


/*
null-объединения - оператор необходимы для установки значений переменным 
    которые имеют ссылочный тип данных
Данное обьединение позволяет установить значение переменной 
    если она ссылается на null
Конструкция:
    "переменная в которую запишем результат операции" = "переменная которая нас интересует" ?? "значение по умолчанию"
*/
string res = inform ?? "Информация не указана";  // В res будет "Информация не указана" так как inform = null
Console.WriteLine($"inform = {res}");

inform ??= "Информация по умолчанию"; // В inform будет "Информация по умолчанию" так как до этого inform = null
// Аналогично: inform = inform ?? "Информация по умолчанию";

void PrintUpper(string? text){
    if(text == null){inform = "null";}

    Console.WriteLine($"inform = {text}"); 
}


/*
Для того чтобы компилятор не предуприждал 
    нас о ошибки можно после переменной указать !
Не оказывает не какого влияния на код,
    смысл заключается в том чтобы просто убрать предупреждение
Имеет смысл там где аргументы не имеют приписки ?
*/
PrintUpper(inform!);
// inform! аналогично inform


// Работа с нессылочными данными

int? age = null; 

// Получение значения age (Работает только для нессылочных типов)
// Console.WriteLine($"age = {age.Value}"); // Будет ошибка так как age не имеет значения
// Аналог 
Console.WriteLine($"age = {age}"); // Ошибки не будет

// Проверка на null. true если есть какое-то значекие, false, если объект равен null.
Console.WriteLine($"age.HasValue = {age.HasValue}");
// Аналог 
Console.WriteLine($"age == null = {age == null}"); // Ошибки не будет