



/*
Строки - объекты хранящие набор символов
В конце каждой строки есть \0
Для строк характерно то что обозначаются они через ""
Виды строк:
    string - состоит из char. Не изменяемые строки
        Обозначение: "текст"

    StringBuilder  - состоит из char. Изменяемые строки


В C# строки типа StringBuilder являются  изменяемыми. 
В отличии от массивов и string данные строки можно изменить 
    и при этом это будет тот же обьект
*/



using System.Text; // Подключаем необходимое пространство имен



StringBuilder name = new StringBuilder(new String('!', 3)); // Создание стрики из повторяющевося символа
Console.WriteLine($"Переменная name = {name}"); // Вывод текста

name = new StringBuilder(new String(
        new char[] { 'w', 'o', 'r', 'l', 'd' }, 1, 3
    )
);  // Создание строки из массива
Console.WriteLine($"Переменная name = {name}"); // Вывод текста

// Создание многострочной строки
name = new StringBuilder("""
Создание многочтрочной строки 
    Именно так создается многострочная строка
    Строка обязательно должна начинатся с нового поля та как иначе будет ошибка
"""); 
Console.WriteLine($"Переменная name = {name}"); 

name = new StringBuilder($"Значение какой-то переменной = {989}"); // Создание форматируемой строки
// В место 989 можно подставить любую переменную
Console.WriteLine($"Переменная name = {name}");

name = new StringBuilder("Alex"); // Уже созданной переменной даем новое значение
Console.WriteLine($"Переменная name = {name}");

///


Console.WriteLine("\n\tИзменение строки"); 


Console.WriteLine($"Получение из динамической строки статическую строку: {name.ToString()}"); 

name.Append(" Merfi"); // Добавление текста в конец строки
// name.Append(" ").Append("Merfi"); // Можно добавлять по цепочке
Console.WriteLine($"Строка  после добавления подстроки: {name}"); 

name.Remove(4, 6);
/* Содержит следующие аргументы
    "обьект к которому применяем".Remove(
    индекс_с_которого_начать(для_обьекта), количество_удаляемых_символов)
количество_удаляемых_символов - данный параметр не обязателен, 
    но без его указания будет удален только тот символ, на который указывает индекс
*/
Console.WriteLine($"Строка после удаления подстроки: {name}"); 

name = name.Insert(4, "Name Carl Lon"); // Вставка подстроки
/* Содержит следующие аргументы
    "переменная в которую сохраняем результат" = "обьект к которому применяем".Insert(
    индекс_с_которого_начать(для_обьекта), "текст который хотим вставить");
*/
Console.WriteLine($"Строка после вставки: {name}"); 

name = name.Replace("Name Carl Lon Merfi", " Merfi"); // Замена подстроки
/* Содержит следующие аргументы
    "переменная в которую сохраняем результат" = "обьект к которому применяем".replace(
        текст который хотим заменить(для_обьекта), текст на который хотим заменить)
*/
Console.WriteLine($"Строка после замены: {name}"); 



///


Console.WriteLine("\n\tВзаимодействие со строками"); 

Console.WriteLine($"Проверка на пустоту строки: {name.Length == 0}" );
Console.WriteLine($"Определение размера строки (количество символов) = {name.Length}");  
Console.WriteLine($"Конкатенация строк через +: name1 = " + name);



///

Console.WriteLine("\n\tИтерация строки:");
Console.Write("Вывод name1 через цикл по символам (с помощью индексации): ");
for (int i = 0; i < name.Length; i +=1){
    Console.Write(name[i]);
}
Console.WriteLine("");




